# coding: utf-8

"""
    DRES API

    API for DRES (Distributed Retrieval Evaluation Server), Version 1.0

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from dres_api.models.client_run_info import ClientRunInfo

class ClientRunInfoList(BaseModel):
    """
    ClientRunInfoList
    """
    runs: conlist(ClientRunInfo) = Field(...)
    __properties = ["runs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientRunInfoList:
        """Create an instance of ClientRunInfoList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in runs (list)
        _items = []
        if self.runs:
            for _item in self.runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientRunInfoList:
        """Create an instance of ClientRunInfoList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientRunInfoList.parse_obj(obj)

        _obj = ClientRunInfoList.parse_obj({
            "runs": [ClientRunInfo.from_dict(_item) for _item in obj.get("runs")] if obj.get("runs") is not None else None
        })
        return _obj


