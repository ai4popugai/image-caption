# coding: utf-8

"""
    DRES API

    API for DRES (Distributed Retrieval Evaluation Server), Version 1.0

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class DresInfo(BaseModel):
    """
    DresInfo
    """
    version: StrictStr = Field(...)
    start_time: StrictInt = Field(..., alias="startTime")
    uptime: StrictInt = Field(...)
    __properties = ["version", "startTime", "uptime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DresInfo:
        """Create an instance of DresInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DresInfo:
        """Create an instance of DresInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DresInfo.parse_obj(obj)

        _obj = DresInfo.parse_obj({
            "version": obj.get("version"),
            "start_time": obj.get("startTime"),
            "uptime": obj.get("uptime")
        })
        return _obj


