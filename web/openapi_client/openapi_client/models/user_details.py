# coding: utf-8

"""
    DRES API

    API for DRES (Distributed Retrieval Evaluation Server), Version 1.0

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class UserDetails(BaseModel):
    """
    UserDetails
    """
    id: StrictStr = Field(...)
    username: StrictStr = Field(...)
    role: StrictStr = Field(...)
    session_id: Optional[StrictStr] = Field(None, alias="sessionId")
    __properties = ["id", "username", "role", "sessionId"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ADMIN', 'JUDGE', 'VIEWER', 'PARTICIPANT'):
            raise ValueError("must be one of enum values ('ADMIN', 'JUDGE', 'VIEWER', 'PARTICIPANT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserDetails:
        """Create an instance of UserDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserDetails:
        """Create an instance of UserDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserDetails.parse_obj(obj)

        _obj = UserDetails.parse_obj({
            "id": obj.get("id"),
            "username": obj.get("username"),
            "role": obj.get("role"),
            "session_id": obj.get("sessionId")
        })
        return _obj


